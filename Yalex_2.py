from token_definition import *
from scanner_simulator import *

class AFD(object):
    def __init__(self):
        self.regex = ['(', '(', '\\s', '|', '\\t', '|', '\\n', ')', '+', ')', '#ws', '(', '(', 65, '|', 66, '|', 67, '|', 68, '|', 69, '|', 70, '|', 71, '|', 72, '|', 73, '|', 74, '|', 75, '|', 76, '|', 77, '|', 78, '|', 79, '|', 80, '|', 81, '|', 82, '|', 83, '|', 84, '|', 85, '|', 86, '|', 87, '|', 88, '|', 89, '|', 90, '|', 97, '|', 98, '|', 99, '|', 100, '|', 101, '|', 102, '|', 103, '|', 104, '|', 105, '|', 106, '|', 107, '|', 108, '|', 109, '|', 110, '|', 111, '|', 112, '|', 113, '|', 114, '|', 115, '|', 116, '|', 117, '|', 118, '|', 119, '|', 120, '|', 121, '|', 122, ')', '(', '(', 65, '|', 66, '|', 67, '|', 68, '|', 69, '|', 70, '|', 71, '|', 72, '|', 73, '|', 74, '|', 75, '|', 76, '|', 77, '|', 78, '|', 79, '|', 80, '|', 81, '|', 82, '|', 83, '|', 84, '|', 85, '|', 86, '|', 87, '|', 88, '|', 89, '|', 90, '|', 97, '|', 98, '|', 99, '|', 100, '|', 101, '|', 102, '|', 103, '|', 104, '|', 105, '|', 106, '|', 107, '|', 108, '|', 109, '|', 110, '|', 111, '|', 112, '|', 113, '|', 114, '|', 115, '|', 116, '|', 117, '|', 118, '|', 119, '|', 120, '|', 121, '|', 122, ')', '|', '(', 48, '|', 49, '|', 50, '|', 51, '|', 52, '|', 53, '|', 54, '|', 55, '|', 56, '|', 57, ')', ')', '*', ')', '#id', '|', '(', '(', 65, '|', 66, '|', 67, '|', 68, '|', 69, '|', 70, '|', 71, '|', 72, '|', 73, '|', 74, '|', 75, '|', 76, '|', 77, '|', 78, '|', 79, '|', 80, '|', 81, '|', 82, '|', 83, '|', 84, '|', 85, '|', 86, '|', 87, '|', 88, '|', 89, '|', 90, '|', 97, '|', 98, '|', 99, '|', 100, '|', 101, '|', 102, '|', 103, '|', 104, '|', 105, '|', 106, '|', 107, '|', 108, '|', 109, '|', 110, '|', 111, '|', 112, '|', 113, '|', 114, '|', 115, '|', 116, '|', 117, '|', 118, '|', 119, '|', 120, '|', 121, '|', 122, ')', '(', '(', 65, '|', 66, '|', 67, '|', 68, '|', 69, '|', 70, '|', 71, '|', 72, '|', 73, '|', 74, '|', 75, '|', 76, '|', 77, '|', 78, '|', 79, '|', 80, '|', 81, '|', 82, '|', 83, '|', 84, '|', 85, '|', 86, '|', 87, '|', 88, '|', 89, '|', 90, '|', 97, '|', 98, '|', 99, '|', 100, '|', 101, '|', 102, '|', 103, '|', 104, '|', 105, '|', 106, '|', 107, '|', 108, '|', 109, '|', 110, '|', 111, '|', 112, '|', 113, '|', 114, '|', 115, '|', 116, '|', 117, '|', 118, '|', 119, '|', 120, '|', 121, '|', 122, ')', '|', '(', 48, '|', 49, '|', 50, '|', 51, '|', 52, '|', 53, '|', 54, '|', 55, '|', 56, '|', 57, ')', ')', '*', ')', '#id', '|', '(', '(', '(', 48, '|', 49, '|', 50, '|', 51, '|', 52, '|', 53, '|', 54, '|', 55, '|', 56, '|', 57, ')', '+', ')', '(', 46, '(', '(', 48, '|', 49, '|', 50, '|', 51, '|', 52, '|', 53, '|', 54, '|', 55, '|', 56, '|', 57, ')', '+', ')', ')', '?', '(', 69, '(', 43, '|', 45, ')', '?', '(', '(', 48, '|', 49, '|', 50, '|', 51, '|', 52, '|', 53, '|', 54, '|', 55, '|', 56, '|', 57, ')', '+', ')', ')', '?', ')', '#number', '|', 43, '#+', '|', 45, '#-', '|', 42, '#*', '|', 47, '#/', '|', 40, '#(', '|', 41, '#)']
        self.states = ['S0', 'S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'S9', 'S10', 'S11', 'S12', 'S13', 'S14', 'S15', 'S16']
        self.transitions = [['S0', '\\s', 'S1'], ['S0', '\\t', 'S1'], ['S0', '\\n', 'S1'], ['S0', 65, 'S2'], ['S0', 66, 'S2'], ['S0', 67, 'S2'], ['S0', 68, 'S2'], ['S0', 69, 'S2'], ['S0', 70, 'S2'], ['S0', 71, 'S2'], ['S0', 72, 'S2'], ['S0', 73, 'S2'], ['S0', 74, 'S2'], ['S0', 75, 'S2'], ['S0', 76, 'S2'], ['S0', 77, 'S2'], ['S0', 78, 'S2'], ['S0', 79, 'S2'], ['S0', 80, 'S2'], ['S0', 81, 'S2'], ['S0', 82, 'S2'], ['S0', 83, 'S2'], ['S0', 84, 'S2'], ['S0', 85, 'S2'], ['S0', 86, 'S2'], ['S0', 87, 'S2'], ['S0', 88, 'S2'], ['S0', 89, 'S2'], ['S0', 90, 'S2'], ['S0', 97, 'S2'], ['S0', 98, 'S2'], ['S0', 99, 'S2'], ['S0', 100, 'S2'], ['S0', 101, 'S2'], ['S0', 102, 'S2'], ['S0', 103, 'S2'], ['S0', 104, 'S2'], ['S0', 105, 'S2'], ['S0', 106, 'S2'], ['S0', 107, 'S2'], ['S0', 108, 'S2'], ['S0', 109, 'S2'], ['S0', 110, 'S2'], ['S0', 111, 'S2'], ['S0', 112, 'S2'], ['S0', 113, 'S2'], ['S0', 114, 'S2'], ['S0', 115, 'S2'], ['S0', 116, 'S2'], ['S0', 117, 'S2'], ['S0', 118, 'S2'], ['S0', 119, 'S2'], ['S0', 120, 'S2'], ['S0', 121, 'S2'], ['S0', 122, 'S2'], ['S0', 48, 'S3'], ['S0', 49, 'S3'], ['S0', 50, 'S3'], ['S0', 51, 'S3'], ['S0', 52, 'S3'], ['S0', 53, 'S3'], ['S0', 54, 'S3'], ['S0', 55, 'S3'], ['S0', 56, 'S3'], ['S0', 57, 'S3'], ['S0', 43, 'S4'], ['S0', 45, 'S5'], ['S0', 42, 'S6'], ['S0', 47, 'S7'], ['S0', 40, 'S8'], ['S0', 41, 'S9'], ['S1', '\\s', 'S1'], ['S1', '\\t', 'S1'], ['S1', '\\n', 'S1'], ['S1', '#ws', 'S10'], ['S2', 65, 'S2'], ['S2', 66, 'S2'], ['S2', 67, 'S2'], ['S2', 68, 'S2'], ['S2', 69, 'S2'], ['S2', 70, 'S2'], ['S2', 71, 'S2'], ['S2', 72, 'S2'], ['S2', 73, 'S2'], ['S2', 74, 'S2'], ['S2', 75, 'S2'], ['S2', 76, 'S2'], ['S2', 77, 'S2'], ['S2', 78, 'S2'], ['S2', 79, 'S2'], ['S2', 80, 'S2'], ['S2', 81, 'S2'], ['S2', 82, 'S2'], ['S2', 83, 'S2'], ['S2', 84, 'S2'], ['S2', 85, 'S2'], ['S2', 86, 'S2'], ['S2', 87, 'S2'], ['S2', 88, 'S2'], ['S2', 89, 'S2'], ['S2', 90, 'S2'], ['S2', 97, 'S2'], ['S2', 98, 'S2'], ['S2', 99, 'S2'], ['S2', 100, 'S2'], ['S2', 101, 'S2'], ['S2', 102, 'S2'], ['S2', 103, 'S2'], ['S2', 104, 'S2'], ['S2', 105, 'S2'], ['S2', 106, 'S2'], ['S2', 107, 'S2'], ['S2', 108, 'S2'], ['S2', 109, 'S2'], ['S2', 110, 'S2'], ['S2', 111, 'S2'], ['S2', 112, 'S2'], ['S2', 113, 'S2'], ['S2', 114, 'S2'], ['S2', 115, 'S2'], ['S2', 116, 'S2'], ['S2', 117, 'S2'], ['S2', 118, 'S2'], ['S2', 119, 'S2'], ['S2', 120, 'S2'], ['S2', 121, 'S2'], ['S2', 122, 'S2'], ['S2', 48, 'S2'], ['S2', 49, 'S2'], ['S2', 50, 'S2'], ['S2', 51, 'S2'], ['S2', 52, 'S2'], ['S2', 53, 'S2'], ['S2', 54, 'S2'], ['S2', 55, 'S2'], ['S2', 56, 'S2'], ['S2', 57, 'S2'], ['S3', 69, 'S11'], ['S3', 48, 'S3'], ['S3', 49, 'S3'], ['S3', 50, 'S3'], ['S3', 51, 'S3'], ['S3', 52, 'S3'], ['S3', 53, 'S3'], ['S3', 54, 'S3'], ['S3', 55, 'S3'], ['S3', 56, 'S3'], ['S3', 57, 'S3'], ['S3', 46, 'S12'], ['S10', 65, 'S13'], ['S10', 66, 'S13'], ['S10', 67, 'S13'], ['S10', 68, 'S13'], ['S10', 69, 'S13'], ['S10', 70, 'S13'], ['S10', 71, 'S13'], ['S10', 72, 'S13'], ['S10', 73, 'S13'], ['S10', 74, 'S13'], ['S10', 75, 'S13'], ['S10', 76, 'S13'], ['S10', 77, 'S13'], ['S10', 78, 'S13'], ['S10', 79, 'S13'], ['S10', 80, 'S13'], ['S10', 81, 'S13'], ['S10', 82, 'S13'], ['S10', 83, 'S13'], ['S10', 84, 'S13'], ['S10', 85, 'S13'], ['S10', 86, 'S13'], ['S10', 87, 'S13'], ['S10', 88, 'S13'], ['S10', 89, 'S13'], ['S10', 90, 'S13'], ['S10', 97, 'S13'], ['S10', 98, 'S13'], ['S10', 99, 'S13'], ['S10', 100, 'S13'], ['S10', 101, 'S13'], ['S10', 102, 'S13'], ['S10', 103, 'S13'], ['S10', 104, 'S13'], ['S10', 105, 'S13'], ['S10', 106, 'S13'], ['S10', 107, 'S13'], ['S10', 108, 'S13'], ['S10', 109, 'S13'], ['S10', 110, 'S13'], ['S10', 111, 'S13'], ['S10', 112, 'S13'], ['S10', 113, 'S13'], ['S10', 114, 'S13'], ['S10', 115, 'S13'], ['S10', 116, 'S13'], ['S10', 117, 'S13'], ['S10', 118, 'S13'], ['S10', 119, 'S13'], ['S10', 120, 'S13'], ['S10', 121, 'S13'], ['S10', 122, 'S13'], ['S11', 48, 'S14'], ['S11', 49, 'S14'], ['S11', 50, 'S14'], ['S11', 51, 'S14'], ['S11', 52, 'S14'], ['S11', 53, 'S14'], ['S11', 54, 'S14'], ['S11', 55, 'S14'], ['S11', 56, 'S14'], ['S11', 57, 'S14'], ['S11', 43, 'S15'], ['S11', 45, 'S15'], ['S12', 48, 'S16'], ['S12', 49, 'S16'], ['S12', 50, 'S16'], ['S12', 51, 'S16'], ['S12', 52, 'S16'], ['S12', 53, 'S16'], ['S12', 54, 'S16'], ['S12', 55, 'S16'], ['S12', 56, 'S16'], ['S12', 57, 'S16'], ['S13', 65, 'S13'], ['S13', 66, 'S13'], ['S13', 67, 'S13'], ['S13', 68, 'S13'], ['S13', 69, 'S13'], ['S13', 70, 'S13'], ['S13', 71, 'S13'], ['S13', 72, 'S13'], ['S13', 73, 'S13'], ['S13', 74, 'S13'], ['S13', 75, 'S13'], ['S13', 76, 'S13'], ['S13', 77, 'S13'], ['S13', 78, 'S13'], ['S13', 79, 'S13'], ['S13', 80, 'S13'], ['S13', 81, 'S13'], ['S13', 82, 'S13'], ['S13', 83, 'S13'], ['S13', 84, 'S13'], ['S13', 85, 'S13'], ['S13', 86, 'S13'], ['S13', 87, 'S13'], ['S13', 88, 'S13'], ['S13', 89, 'S13'], ['S13', 90, 'S13'], ['S13', 97, 'S13'], ['S13', 98, 'S13'], ['S13', 99, 'S13'], ['S13', 100, 'S13'], ['S13', 101, 'S13'], ['S13', 102, 'S13'], ['S13', 103, 'S13'], ['S13', 104, 'S13'], ['S13', 105, 'S13'], ['S13', 106, 'S13'], ['S13', 107, 'S13'], ['S13', 108, 'S13'], ['S13', 109, 'S13'], ['S13', 110, 'S13'], ['S13', 111, 'S13'], ['S13', 112, 'S13'], ['S13', 113, 'S13'], ['S13', 114, 'S13'], ['S13', 115, 'S13'], ['S13', 116, 'S13'], ['S13', 117, 'S13'], ['S13', 118, 'S13'], ['S13', 119, 'S13'], ['S13', 120, 'S13'], ['S13', 121, 'S13'], ['S13', 122, 'S13'], ['S13', 48, 'S13'], ['S13', 49, 'S13'], ['S13', 50, 'S13'], ['S13', 51, 'S13'], ['S13', 52, 'S13'], ['S13', 53, 'S13'], ['S13', 54, 'S13'], ['S13', 55, 'S13'], ['S13', 56, 'S13'], ['S13', 57, 'S13'], ['S14', 48, 'S14'], ['S14', 49, 'S14'], ['S14', 50, 'S14'], ['S14', 51, 'S14'], ['S14', 52, 'S14'], ['S14', 53, 'S14'], ['S14', 54, 'S14'], ['S14', 55, 'S14'], ['S14', 56, 'S14'], ['S14', 57, 'S14'], ['S15', 48, 'S14'], ['S15', 49, 'S14'], ['S15', 50, 'S14'], ['S15', 51, 'S14'], ['S15', 52, 'S14'], ['S15', 53, 'S14'], ['S15', 54, 'S14'], ['S15', 55, 'S14'], ['S15', 56, 'S14'], ['S15', 57, 'S14'], ['S16', 69, 'S11'], ['S16', 48, 'S16'], ['S16', 49, 'S16'], ['S16', 50, 'S16'], ['S16', 51, 'S16'], ['S16', 52, 'S16'], ['S16', 53, 'S16'], ['S16', 54, 'S16'], ['S16', 55, 'S16'], ['S16', 56, 'S16'], ['S16', 57, 'S16']]
        self.initial_state = 'S0'
        self.final_states = {'S2': '#id', 'S3': '#number', 'S4': '#+', 'S5': '#-', 'S6': '#*', 'S7': '#/', 'S8': '#(', 'S9': '#)', 'S13': '#id', 'S14': '#number', 'S16': '#number'}
        self.symbols = ['\\s', '\\t', '\\n', '#ws', 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, '#id', 46, 43, 45, '#number', '#+', '#-', 42, '#*', 47, '#/', 40, '#(', 41, '#)']

def tokenScanner(token):
	if(token == '#id'):
		return ID
	if(token == '#number'):
		return NUMBER
	if(token == '#+'):
		return PLUS
	if(token == '#-'):
		return MINUS
	if(token == '#*'):
		return TIMES
	if(token == '#/'):
		return DIV
	if(token == '#('):
		return LPAREN
	if(token == '#)'):
		return RPAREN

	return ERROR

afd = AFD()
simulation('./tests/token_test.txt', tokenScanner, afd)